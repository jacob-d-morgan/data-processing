function cycles = calcCycles(importedData,isRefVar)
% CALCCYCLES converts imported ISODAT data to an array of cycle data
%   CYCLES = CALCCYCLES(IMPORTEDDATA,ISREF) calculates delta values from
%   the table of imported data generated by csvReadIsodat(). ISREFVAR is
%   the variable that indicates whether a given line is a sample (false) or
%   reference (true) measurement. It can be either (1) a logical variable
%   with one column and the same number of rows as importedData, (2) the
%   name of a variable in importedData, (3) the index of a variable in
%   importedData, or (4) a logical index with one row and the same number
%   of columns as imported data.
%
%   CYCLES is a structure containing two tables:
%       1. METADATA - a table of ISODAT metadata from the sample rows.
%       2. DELTAS - a table of delta values calculated for each cycle using
%       the raw (background corrected) voltages.
%
% -------------------------------------------------------------------------

%% Parse Inputs
% Check that the variables provided are of the correct format.

if ~istable(importedData)
    error('Invalid first input: must be a table of importedData generated by csvReadIsodat()')
end

if islogical(isRefVar)
    if size(importedData,1)==size(isRefVar,1)
        iRef = isRefVar;
    elseif size(importedData,2)==size(isRefVar,2)
        iRef = importedData(:,isRefVar);
    else
        error('Invalid logical second input: must contain the same number of columns or rows as the first input.')
    end
elseif ischar(isRefVar) || isStringScalar(isRefVar)
    if ismember(isRefVar,importedData.Properties.VariableNames)
        iRef = importedData.(isRefVar);
    else
        error('Invalid text second input: must be the (case-sepcific) name of a variable in the first input.')
    end
elseif isscalar(isRefVar)
    if ismember(isRefVar,1:size(importedData,2))
        iRef = importedData(:,isRefVar);
    else
        error('Invalid numeric second input: must be the index of a variable in the first input.')
    end
else
    error('Invalid second input: see help for valid forms')
end


%% Interpolate Standard Voltages onto the Sample Voltage Indices
% Interpolate the standard voltages that bracket each sample measurement
% onto the indices of the sample voltages for delta value calculation.

colsToUse = contains(importedData.Properties.VariableNames,'rIntensity');

intSA = importedData(~iRef,colsToUse);
intST = array2table(interp1(find(iRef),importedData{iRef,colsToUse},find(~iRef)));
intST.Properties.VariableNames = intSA.Properties.VariableNames;


%% Calculate Delta Values
% Calculate various delta values using the interpolated voltages.

deltas = table();
deltas.d15N = ((intSA.rIntensity29./intSA.rIntensity28)./(intST.rIntensity29./intST.rIntensity28) - 1)*1000;
deltas.d18O = ((intSA.rIntensity34./intSA.rIntensity32)./(intST.rIntensity34./intST.rIntensity32) - 1)*1000;
deltas.d17O = ((intSA.rIntensity33./intSA.rIntensity32)./(intST.rIntensity33./intST.rIntensity32) - 1)*1000;
deltas.d4036Ar = ((intSA.rIntensity40./intSA.rIntensity36)./(intST.rIntensity40./intST.rIntensity36) - 1)*1000;
deltas.d4038Ar = ((intSA.rIntensity40./intSA.rIntensity38)./(intST.rIntensity40./intST.rIntensity38) - 1)*1000;
deltas.dO2N2 = ((intSA.rIntensity32./intSA.rIntensity28)./(intST.rIntensity32./intST.rIntensity28) - 1)*1000;
deltas.dArN2 = ((intSA.rIntensity40./intSA.rIntensity28)./(intST.rIntensity40./intST.rIntensity28) - 1)*1000;

descriptions = deltas.Properties.VariableNames;
descriptions = replace(descriptions,'d','\delta');
descriptions = replace(descriptions,'15','^{15}');
descriptions = replace(descriptions,'17','^{17}');
descriptions = replace(descriptions,'18','^{18}');
descriptions = replace(descriptions,'4036','^{40}/_{36}');
descriptions = replace(descriptions,'4038','^{40}/_{38}');
descriptions = replace(descriptions,'O2N2','O_2/N_2');
descriptions = replace(descriptions,'ArN2','Ar/N_2');

deltas.Properties.VariableDescriptions = descriptions;
deltas.Properties.VariableUnits = repmat({char(8240)},1,size(deltas,2));


%% Extract Cycle Metadata
% Create a table of metadata for each cycle.

metadata = table();
metadata.msDatetime = datetime(importedData.datetime(~importedData.IsRef__));
metadata.msDatenum = datenum(importedData.datenum(~importedData.IsRef__));
metadata.filename = importedData.FileHeader_Filename(~importedData.IsRef__);
metadata.sequenceRow = importedData.SequenceRow(~importedData.IsRef__);
metadata.ASInlet = importedData.AS_SIOInlet(~importedData.IsRef__);
metadata.ID1 = importedData.Identifier1(~importedData.IsRef__);
metadata.method = importedData.Method(~importedData.IsRef__);
metadata.scriptName = importedData.ScriptName(~importedData.IsRef__);
metadata.gasConfig = importedData.GasConfiguration(~importedData.IsRef__);
metadata.gasName = importedData.GasName(~importedData.IsRef__);
metadata.int28SA = intSA.rIntensity28;
metadata.int28ST = intST.rIntensity28;
metadata.pressureImbal = (intSA.rIntensity28 - intST.rIntensity28);


%% Assemble Output
% Combine both tables into one structure.

cycles = struct('deltas',deltas,'metadata',metadata);


end